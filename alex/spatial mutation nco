// set up a simple neutral nonWF simulation
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq(retainCoalescentOnly = F);
	defineConstant("K", 500);	// carrying capacity
	
	// beneficial mutations
	initializeMutationType("m1", 0.5, "n", 0.2, 0.05);
	m1.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(0);
	initializeRecombinationRate(1e-8);
	
	// spatial competition, stronger at closer distances
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=0.2);
	i1.setInteractionFunction("n", 1.0, 0.07);

	// spatial mate choice, biased towards closer individuals
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.1);
	i2.setInteractionFunction("n", 0.5, 0.04);
}

// each individual reproduces itself once
reproduction() {
	suitors = i2.totalOfNeighborStrengths(individual);
	if (suitors==0) {
		return;
	}
	for (i in rpois(1, 0.05*suitors)) {
		mate = i2.drawByStrength(individual);
		child = p1.addCrossed(individual, mate);
		if (child.sumOfMutationsOfType(m1) > 0) {
			child.color = "cornflowerblue"; }
		rand = individual.spatialPosition + rnorm(2, 0, 0.02);		
		child.setSpatialPosition(p1.pointStopped(rand));
		sim.treeSeqRememberIndividuals(child, permanent=F);
	}
	return;
}

// create an initial population of 10 individuals
1 early() {
	sim.addSubpop("p1", 10);
	p1.individuals.setSpatialPosition(p1.pointUniform(10));
	sim.treeSeqRememberIndividuals(p1.individuals);
	
}

// provide density-dependent selection
early() {
	for (ind in p1.individuals) {
		move = rnorm(2, 0, 0.01);
		new = p1.pointStopped(ind.spatialPosition + move);
		ind.setSpatialPosition(new);
	}
	i1.evaluate();
	inds = p1.individuals;
	comp = i1.totalOfNeighborStrengths(inds);
	comp = (comp + 1) / (0.1^2 * PI);
	inds.fitnessScaling = K/comp;
}

late() {
	i2.evaluate();
}

1000 early() {
	muted = 0;
	while (muted < 10) {
		potential = sample(p1.individuals, 1);
		if (potential.age == 0) {
			for (p in potential) {
				gen = p.genomes[rbinom(1, 1, 0.5)];
				gen.addNewDrawnMutation(m1, 10000);
			}
			muted = muted + 1;
		}
	}
}


2000 late() { 
	sim.treeSeqOutput("memutory_nonco.trees");
	catn("Finished!");
}
